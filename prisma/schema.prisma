generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id              String           @id            @default(uuid())
  role            AccountRole
  username        String           @unique
  authentications authentications?
}

model authentications {
  account_id    String   @id
  password_hash String
  salt          String
  algorithm     String   @default("bcrypt")
  updated_at    DateTime @default(now())
  accounts      accounts @relation(fields: [account_id], references: [id], onDelete: Cascade)
}

model billing_method {
  id           String         @id            @default(uuid())
  name         String
  description  String
  tolerance    Float?
  billing_rule billing_rule[]
}

model billing_rule {
  id                String         @id            @default(uuid())
  price             Float
  base_time         Int?
  billing_method_id String
  created_at        DateTime       @default(now())
  updated_at        DateTime
  vehicle_type      String
  billing_method    billing_method @relation(fields: [billing_method_id], references: [id])
}

model cash_register {
  id                     String                @id            @default(uuid())
  opening_date           DateTime
  closing_date           DateTime?
  status                 CashRegisterStatus    @default(OPEN)
  operator               String
  initial_value          Decimal               @db.Decimal(10, 2)
  final_value            Decimal               @db.Decimal(10, 2)
  general_sale_total     Decimal               @default(0.00) @db.Decimal(10, 2)
  vehicle_entry_total    Decimal               @default(0.00) @db.Decimal(10, 2)
  outgoing_expense_total Decimal               @default(0.00) @db.Decimal(10, 2)
  outgoing_expense       outgoing_expense[]
  product_transaction    product_transaction[]
  vehicle_transaction    vehicle_transaction[]
}

model financial_movement {
  id               String   @id            @default(uuid())
  description      String
  amount           Decimal  @db.Decimal(10, 2)
  transaction_date DateTime @default(now())
  payment_method   Method
}

model general_sale {
  id              String    @id            @default(uuid())
  product_id      String
  unit_price      Decimal   @db.Decimal(10, 2)
  quantity        Int
  expiration_date DateTime?
  products        products  @relation(fields: [product_id], references: [id])
}

model outgoing_expense {
  id               String        @id            @default(uuid())
  description      String
  amount           Decimal       @db.Decimal(10, 2)
  transaction_date DateTime      @default(now())
  cash_register_id String
  operator         String
  cash_register    cash_register @relation(fields: [cash_register_id], references: [id])
}

model patio_configs {
  id                 String @id @default("singleton")
  max_cars           Int
  max_motorcycles    Int
}

model product_transaction {
  id               String        @id            @default(uuid())
  operator         String
  transaction_date DateTime
  cash_register_id String
  original_amount  Decimal       @db.Decimal(10, 2)
  discount_amount  Decimal       @default(0) @db.Decimal(10, 2)
  final_amount     Decimal       @db.Decimal(10, 2)
  amount_received  Decimal       @default(0.00) @db.Decimal(10, 2)
  change_given     Decimal       @default(0.00) @db.Decimal(10, 2)
  method           Method
  cash_register    cash_register @relation(fields: [cash_register_id], references: [id])
  sale_items       sale_items[]
}

model products {
  id           String         @id            @default(uuid())
  product_name String
  barcode      String?        @unique
  general_sale general_sale[]
  sale_items   sale_items[]
}

model sale_items {
  id                     String              @id            @default(uuid())
  product_transaction_id String
  product_id             String?
  expiration_date        DateTime?
  product_name           String
  sold_quantity          Int
  unit_price             Decimal             @db.Decimal(10, 2)
  products               products?           @relation(fields: [product_id], references: [id])
  product_transaction    product_transaction @relation(fields: [product_transaction_id], references: [id], onDelete: Cascade)
}

model vehicle_entries {
  id                  String                @id            @default(uuid())
  plate               String
  entry_time          DateTime              @default(now())
  category            VehicleCategory
  operator            String
  deleted_at          DateTime?
  description         String?               @default("")
  exit_time           DateTime?
  status              VehicleStatus         @default(INSIDE)
  vehicle_transaction vehicle_transaction[]

  @@index([plate])
}

model vehicle_transaction {
  id               String          @id            @default(uuid())
  vehicle_id       String
  operator         String
  transaction_date DateTime
  cash_register_id String
  amount_received  Decimal         @default(0.00) @db.Decimal(10, 2)
  change_given     Decimal         @default(0.00) @db.Decimal(10, 2)
  discount_amount  Decimal         @default(0) @db.Decimal(10, 2)
  final_amount     Decimal         @db.Decimal(10, 2)
  original_amount  Decimal         @db.Decimal(10, 2)
  method           Method
  cash_register    cash_register   @relation(fields: [cash_register_id], references: [id])
  vehicle_entries  vehicle_entries @relation(fields: [vehicle_id], references: [id])
}

enum AccountRole {
  ADMIN
  NORMAL
}

enum CashRegisterStatus {
  OPEN
  CLOSED
}

enum InputType {
  number
  text
  select
}

enum Method {
  DINHEIRO
  PIX
  CREDITO
  DEBITO
}

enum VehicleCategory {
  carro
  moto
}

enum VehicleStatus {
  INSIDE
  EXITED
  DELETED
}
