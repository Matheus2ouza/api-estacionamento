generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Accounts {
  id              String           @id @default(uuid())
  role            AccountRole
  username        String           @unique
  authentications Authentications?

  @@map("accounts")
}

model Authentications {
  accountId    String   @id @map("account_id")
  passwordHash String   @map("password_hash")
  salt         String
  algorithm    String   @default("bcrypt")
  updatedAt    DateTime @default(now()) @map("updated_at")
  Accounts     Accounts @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("authentications")
}

model CashRegister {
  id                   String               @id @default(uuid())
  openingDate          DateTime             @map("opening_date")
  closingDate          DateTime?            @map("closing_date")
  status               CashRegisterStatus   @default(OPEN)
  operator             String
  initialValue         Decimal              @map("initial_value") @db.Decimal(10, 2)
  finalValue           Decimal              @map("final_value") @db.Decimal(10, 2)
  generalSaleTotal     Decimal              @default(0.00) @map("general_sale_total") @db.Decimal(10, 2)
  vehicleEntryTotal    Decimal              @default(0.00) @map("vehicle_entry_total") @db.Decimal(10, 2)
  outgoingExpenseTotal Decimal              @default(0.00) @map("outgoing_expense_total") @db.Decimal(10, 2)
  OutgoingExpense      OutgoingExpense[]
  ProductTransactions  ProductTransaction[]
  vehicleTransactions  VehicleTransaction[]

  @@map("cash_register")
}

model FinancialMovement {
  id              String        @id @default(uuid())
  description     String
  amount          Decimal       @db.Decimal(10, 2)
  transactionDate DateTime      @default(now()) @map("transaction_date")
  paymentMethod   PaymentMethod @map("payment_method")

  @@map("financial_movement")
}

model GeneralSale {
  id             String    @id @default(uuid())
  productId      String    @map("product_id")
  unitPrice      Decimal   @map("unit_price") @db.Decimal(10, 2)
  quantity       Int
  expirationDate DateTime? @map("expiration_date")
  Products       Products  @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@map("general_sale")
}

model OutgoingExpense {
  id              String       @id @default(uuid())
  description     String
  amount          Decimal      @db.Decimal(10, 2)
  transactionDate DateTime     @default(now()) @map("transaction_date")
  cashRegisterId  String       @map("cash_register_id")
  operator        String
  CashRegister    CashRegister @relation(fields: [cashRegisterId], references: [id], onDelete: SetNull)

  @@map("outgoing_expense")
}

model PatioConfigs {
  id               String @id @default("singleton")
  maxCars          Int    @map("max_cars")
  maxLargeVehicles Int    @map("max_large_vehicles")
  maxMotorcycles   Int    @map("max_motorcycles")

  @@map("patio_configs")
}

model ProductTransaction {
  id              String        @id @default(uuid())
  operator        String
  transactionDate DateTime      @map("transaction_date")
  cashRegisterId  String        @map("cash_register_id")
  originalAmount  Decimal       @map("original_amount") @db.Decimal(10, 2)
  discountAmount  Decimal       @default(0) @map("discount_amount") @db.Decimal(10, 2)
  finalAmount     Decimal       @map("final_amount") @db.Decimal(10, 2)
  amountReceived  Decimal       @default(0.00) @map("amount_received") @db.Decimal(10, 2)
  changeGiven     Decimal       @default(0.00) @map("change_given") @db.Decimal(10, 2)
  Method          PaymentMethod @map("method")
  
  CashRegister    CashRegister  @relation(fields: [cashRegisterId], references: [id], onDelete: SetNull)
  SaleItems       SaleItems[]

  @@map("product_transaction")
}

model Products {
  id          String        @id @default(uuid())
  productName String        @map("product_name")
  barcode     String?       @unique
  GeneralSale GeneralSale[]
  SaleItems   SaleItems[]

  @@map("products")
}

model SaleItems {
  id                   String             @id @default(uuid())
  productTransactionId String             @map("product_transaction_id")
  productId            String?            @map("product_id")
  expirationDate       DateTime?          @map("expiration_date")
  productName          String             @map("product_name")
  soldQuantity         Int                @map("sold_quantity")
  unitPrice            Decimal            @map("unit_price") @db.Decimal(10, 2)
  Products             Products?          @relation(fields: [productId], references: [id])
  ProductTransaction   ProductTransaction @relation(fields: [productTransactionId], references: [id], onDelete: Cascade)

  @@map("sale_items")
}

model VehicleEntries {
  id                 String               @id @default(uuid())
  plate              String
  entryTime          DateTime             @default(now()) @map("entry_time")
  category           VehicleCategory
  operator           String
  deletedAt          DateTime?            @map("deleted_at")
  description        String?              @default("")
  exitTime           DateTime?            @map("exit_time")
  status             VehicleStatus        @default(INSIDE)
  VehicleTransaction VehicleTransaction[]

  @@index([plate])
  @@map("vehicle_entries")
}

model VehicleTransaction {
  id              String         @id @default(uuid())
  vehicleId       String         @map("vehicle_id")
  operator        String
  transactionDate DateTime       @map("transaction_date")
  cashRegisterId  String         @map("cash_register_id")
  amountReceived  Decimal        @default(0.00) @map("amount_received") @db.Decimal(10, 2)
  changeGiven     Decimal        @default(0.00) @map("change_given") @db.Decimal(10, 2)
  discountAmount  Decimal        @default(0) @map("discount_amount") @db.Decimal(10, 2)
  finalAmount     Decimal        @map("final_amount") @db.Decimal(10, 2)
  originalAmount  Decimal        @map("original_amount") @db.Decimal(10, 2)
  Method          PaymentMethod  @map("method")
  CashRegister    CashRegister   @relation(fields: [cashRegisterId], references: [id], onDelete: SetNull)
  VehicleEntries  VehicleEntries @relation(fields: [vehicleId], references: [id], onDelete: SetNull)

  @@map("vehicle_transaction")
}

model BillingMethod {
  id           String        @id @default(uuid())
  name         String
  description  String
  tolerance    Float?
  billingRules BillingRule[]

  @@map("billing_method")
}

model BillingRule {
  id              String        @id @default(uuid())
  price           Float
  baseTime        Int?          @map("base_time")
  billingMethodId String        @map("billing_method_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  vehicleType     String        @map("vehicle_type")
  billingMethod   BillingMethod @relation(fields: [billingMethodId], references: [id])

  @@map("billing_rule")
}

enum InputType {
  number
  text
  select
}

enum AccountRole {
  ADMIN
  NORMAL
}

enum CashRegisterStatus {
  OPEN
  CLOSED
}

enum PaymentMethod {
  DINHEIRO
  PIX
  CREDITO
  DEBITO
}

enum VehicleCategory {
  carro
  moto
}

enum VehicleStatus {
  INSIDE
  EXITED
  DELETED
}
