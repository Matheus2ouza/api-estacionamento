generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id             String           @id @default(uuid())
  role           AccountRole    
  username       String           @unique
  authentication Authentication?

  @@map("accounts")
}

model Authentication {
  accountId    String   @id @map("account_id")
  passwordHash String   @map("password_hash")
  salt         String
  algorithm    String   @default("bcrypt")
  updatedAt    DateTime @default(now()) @map("updated_at")
  account      Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@map("authentications")
}

model CashRegister {
  id                  String                @id @default(uuid())
  openingDate         DateTime              @map("opening_date")
  closingDate         DateTime?             @map("closing_date")
  status              CashRegisterStatus    @default(OPEN)
  operator            String
  initialValue        Decimal               @db.Decimal(10, 2) @map("initial_value")
  finalValue          Decimal               @db.Decimal(10, 2) @map("final_value")

  outgoingExpenses    OutgoingExpense[]
  Transactions        Transaction[]

  @@map("cash_register")
}

model VehicleEntry {
  id          String         @id @default(uuid())
  plate       String
  category    VehicleCategory
  operator    String
  entryTime   DateTime       @default(now()) @map("entry_time")
  exitTime    DateTime?      @map("exit_time")
  status      VehicleStatus  @default(INSIDE)
  deletedAt   DateTime?      @map("deleted_at")
  description String?        @default("")

  transactions   Transaction[]

  @@map("vehicle_entries")
  @@index([plate])
}

model Product {
  id                String         @id @default(uuid())
  productName       String         @map("product_name")

  transactions      Transaction[]
  generalSales      GeneralSale[]

  @@map("products")
}

model GeneralSale {
  id                String         @id @default(uuid())
  productId         String         @map("product_id")
  unitPrice         Decimal        @db.Decimal(10, 2)  @map("unit_price")
  quantity          Int
  expirationDate    DateTime?      @map("expiration_date") 

  product           Product        @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@map("general_sale")
}

model Transaction {
  id                String         @id @default(uuid())
  vehicleId         String?        @map("vehicle_id")
  productId         String?        @map("product_id")
  operator          String
  paymentMethod     PaymentMethod  
  transactionDate   DateTime       @map("transaction_date")
  cashRegisterId    String         @map("cash_register_id")
  
  vehicleEntry      VehicleEntry?  @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  product           Product?       @relation(fields: [productId], references: [id], onDelete: SetNull)
  cashRegister      CashRegister   @relation(fields: [cashRegisterId], references: [id], onDelete: SetNull)

  @@map("transaction")
}

model OutgoingExpense {
  id                String         @id @default(uuid())
  description       String         @map("description")
  amount            Decimal        @db.Decimal(10, 2) @map("amount")
  transactionDate   DateTime       @default(now()) @map("transaction_date")
  cashRegisterId    String         @map("cash_register_id")
  operator          String

  cashRegister      CashRegister   @relation(fields: [cashRegisterId], references: [id], onDelete: SetNull)

  @@map("outgoing_expense")
}

model FinancialMovement {
  id                String         @id @default(uuid())
  description       String
  amount            Decimal        @db.Decimal(10, 2) @map("amount")
  paymentMethod     PaymentMethod
  transactionDate   DateTime       @default(now()) @map("transaction_date")

  @@map("financial_movement")
}

model PatioConfig {
  id               String @id @default("singleton")
  maxCars          Int
  maxMotorcycles   Int
  maxLargeVehicles Int

  @@map("patio_configs")
}

enum AccountRole {
  ADMIN
  NORMAL
}

enum CashRegisterStatus {
  OPEN
  CLOSED
}

enum PaymentMethod {
  DINHEIRO
  PIX
  CREDITO
  DEBITO
}

enum VehicleCategory {
  carro
  moto
  carroGrande
}

enum VehicleStatus {
  INSIDE     // veículo está no pátio
  EXITED     // veículo saiu do pátio
  DELETED    // registro foi "apagado" mas pode ser restaurado
}