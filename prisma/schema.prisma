generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Accounts {
  id              String           @id
  role            AccountRole
  username        String           @unique
  authentications Authentications?

  @@map("accounts")
}

model Authentications {
  account_id    String   @id
  password_hash String
  salt          String
  algorithm     String   @default("bcrypt")
  updated_at    DateTime @default(now())
  Accounts      Accounts @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@map("authentications")
}

model CashRegister {
  id                     String               @id
  opening_date           DateTime
  closing_date           DateTime?
  status                 CashRegisterStatus   @default(OPEN)
  operator               String
  initial_value          Decimal              @db.Decimal(10, 2)
  final_value            Decimal              @db.Decimal(10, 2)
  general_sale_total     Decimal              @default(0.00) @db.Decimal(10, 2)
  vehicle_entry_total    Decimal              @default(0.00) @db.Decimal(10, 2)
  outgoing_expense_total Decimal              @default(0.00) @db.Decimal(10, 2)
  OutgoingExpense        OutgoingExpense[]
  ProductTransaction     ProductTransaction[]
  VehicleTransaction     VehicleTransaction[]

  @@map("cash_register")
}

model FinancialMovement {
  id               String        @id
  description      String
  amount           Decimal       @db.Decimal(10, 2)
  transaction_date DateTime      @default(now())
  paymentMethod    PaymentMethod

  @@map("financial_movement")
}

model GeneralSale {
  id              String    @id
  product_id      String
  unit_price      Decimal   @db.Decimal(10, 2)
  quantity        Int
  expiration_date DateTime?
  Products        Products  @relation(fields: [product_id], references: [id], onDelete: SetNull)

  @@map("general_sale")
}

model OutgoingExpense {
  id               String       @id
  description      String
  amount           Decimal      @db.Decimal(10, 2)
  transaction_date DateTime     @default(now())
  cash_register_id String
  operator         String
  CashRegister     CashRegister @relation(fields: [cash_register_id], references: [id], onDelete: SetNull)

  @@map("outgoing_expense")
}

model PatioConfigs {
  id               String @id @default("singleton")
  maxCars          Int
  maxMotorcycles   Int
  maxLargeVehicles Int

  @@map("patio_configs")
}

model ProductTransaction {
  id               String        @id
  operator         String
  paymentMethod    PaymentMethod
  transaction_date DateTime
  cash_register_id String
  original_amount  Decimal       @db.Decimal(10, 2)
  discount_amount  Decimal       @default(0) @db.Decimal(10, 2)
  final_amount     Decimal       @db.Decimal(10, 2)
  amount_received  Decimal       @default(0.00) @db.Decimal(10, 2)
  change_given     Decimal       @default(0.00) @db.Decimal(10, 2)
  CashRegister     CashRegister  @relation(fields: [cash_register_id], references: [id], onDelete: SetNull)
  SaleItems        SaleItems[]

  @@map("product_transaction")
}

model Products {
  id           String        @id
  product_name String
  barcode      String?       @unique
  GeneralSale  GeneralSale[]
  SaleItems    SaleItems[]

  @@map("products")
}

model SaleItems {
  id                     String             @id
  product_transaction_id String
  product_id             String?
  soldQuantity           Int
  productName            String
  unitPrice              Decimal            @db.Decimal(10, 2)
  expirationDate         DateTime?
  Products               Products?          @relation(fields: [product_id], references: [id])
  ProductTransaction     ProductTransaction @relation(fields: [product_transaction_id], references: [id], onDelete: Cascade)

  @@map("sale_items")
}

model VehicleEntries {
  id                 String               @id
  plate              String
  entry_time         DateTime             @default(now())
  category           VehicleCategory
  operator           String
  deleted_at         DateTime?
  description        String?              @default("")
  exit_time          DateTime?
  status             VehicleStatus        @default(INSIDE)
  VehicleTransaction VehicleTransaction[]

  @@index([plate])
  @@map("vehicle_entries")
}

model VehicleTransaction {
  id               String         @id
  vehicle_id       String
  operator         String
  paymentMethod    PaymentMethod
  transaction_date DateTime
  cash_register_id String
  amount_received  Decimal        @default(0.00) @db.Decimal(10, 2)
  change_given     Decimal        @default(0.00) @db.Decimal(10, 2)
  discount_amount  Decimal        @default(0) @db.Decimal(10, 2)
  final_amount     Decimal        @db.Decimal(10, 2)
  original_amount  Decimal        @db.Decimal(10, 2)
  CashRegister     CashRegister   @relation(fields: [cash_register_id], references: [id], onDelete: SetNull)
  VehicleEntries   VehicleEntries @relation(fields: [vehicle_id], references: [id], onDelete: SetNull)

  @@map("vehicle_transaction")
}

model BillingMethod {
  id          String       @id @default(uuid())
  name        String
  description String
  tolerance   Float?
  billingRule BillingRule? @relation("OneToOneBillingRule") // lado A da relação

  @@map("billing_method")
}

model BillingRule {
  id              String   @id @default(uuid())
  billingMethodId String   @unique
  vehicleType     String
  baseTime        Int?
  price           Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  billingMethod   BillingMethod @relation("OneToOneBillingRule", fields: [billingMethodId], references: [id]) // lado B da relação

  @@map("billing_rule")
}

enum InputType {
  number
  text
  select
}

enum AccountRole {
  ADMIN
  NORMAL
}

enum CashRegisterStatus {
  OPEN
  CLOSED
}

enum PaymentMethod {
  DINHEIRO
  PIX
  CREDITO
  DEBITO
}

enum VehicleCategory {
  carro
  moto
}

enum VehicleStatus {
  INSIDE
  EXITED
  DELETED
}
