generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Accounts {
  id              String           @id @default(uuid())
  role            AccountRole
  username        String           @unique
  authentications Authentications?

  @@map("accounts")
}

model Authentications {
  account_id   String   @id
  passwordHash String   @map("password_hash")
  salt         String
  algorithm    String   @default("bcrypt")
  updatedAt    DateTime @default(now()) @map("updated_at")
  accounts     Accounts @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@map("authentications")
}

model BillingMethod {
  id             String           @id @default(uuid())
  name           String
  description    String
  tolerance      Float?
  isActive       Boolean          @default(false) @map("is_active")
  billing_rule   billing_rule[]
  vehicleEntries VehicleEntries[]

  @@map("billing_method")
}

model GoalConfigs {
  id                    String   @id @default("singleton")
  daily_goal_value      Decimal  @db.Decimal(10, 2)
  vehicle_goal_quantity Int
  product_goal_quantity Int
  notifications_enabled Boolean
  category_goals_active Boolean
  updated_at            DateTime
  week_end_day          Int
  week_start_day        Int
  goalPeriod            Period   @map("goal_period")

  @@map("goal_configs")
}

model CashRegister {
  id                   String               @id @default(uuid())
  openingDate          DateTime             @map("opening_date")
  closingDate          DateTime?            @map("closing_date")
  status               CashRegisterStatus   @default(OPEN)
  operator             String
  initialValue         Decimal              @map("initial_value") @db.Decimal(10, 2)
  finalValue           Decimal              @map("final_value") @db.Decimal(10, 2)
  generalSaleTotal     Decimal              @default(0.00) @map("general_sale_total") @db.Decimal(10, 2)
  vehicleEntryTotal    Decimal              @default(0.00) @map("vehicle_entry_total") @db.Decimal(10, 2)
  outgoingExpenseTotal Decimal              @default(0.00) @map("outgoing_expense_total") @db.Decimal(10, 2)
  outgoingExpense      OutgoingExpense[]
  productTransaction   ProductTransaction[]
  vehicleTransaction   VehicleTransaction[]

  @@map("cash_register")
}

model FinancialMovement {
  id              String   @id @default(uuid())
  description     String
  amount          Decimal  @db.Decimal(10, 2)
  transactionDate DateTime @default(now()) @map("transaction_date")
  paymentMethod   Method   @map("payment_method")

  @@map("financial_movement")
}

model GeneralSale {
  id             String    @id @default(uuid())
  productId      String    @unique @map("product_id")
  unitPrice      Decimal   @map("unit_price") @db.Decimal(10, 2)
  quantity       Int
  expirationDate DateTime? @map("expiration_date")
  products       Products  @relation(fields: [productId], references: [id])

  @@map("general_sale")
}

model OutgoingExpense {
  id              String       @id @default(uuid())
  description     String
  amount          Decimal      @db.Decimal(10, 2)
  transactionDate DateTime     @default(now()) @map("transaction_date")
  cashRegisterId  String       @map("cash_register_id")
  operator        String
  method          Method
  cashRegister    CashRegister @relation(fields: [cashRegisterId], references: [id])

  @@map("outgoing_expense")
}

model patio_configs {
  id             String @id @default("singleton")
  maxCars        Int    @map("max_cars")
  maxMotorcycles Int    @map("max_motorcycles")

  @@map("patio_configs")
}

model ProductTransaction {
  id              String       @id @default(uuid())
  operator        String
  transactionDate DateTime     @map("transaction_date")
  cashRegisterId  String       @map("cash_register_id")
  originalAmount  Decimal      @map("original_amount") @db.Decimal(10, 2)
  discountAmount  Decimal      @default(0) @map("discount_amount") @db.Decimal(10, 2)
  finalAmount     Decimal      @map("final_amount") @db.Decimal(10, 2)
  amountReceived  Decimal      @default(0.00) @map("amount_received") @db.Decimal(10, 2)
  changeGiven     Decimal      @default(0.00) @map("change_given") @db.Decimal(10, 2)
  method          Method
  photo           Bytes?
  photoType       String?      @map("photo_type")
  cashRegister    CashRegister @relation(fields: [cashRegisterId], references: [id])
  saleItems       SaleItems[]

  @@map("product_transaction")
}

model Products {
  id          String       @id @default(uuid())
  productName String       @map("product_name")
  barcode     String?      @unique
  isActive    Boolean      @default(true) @map("is_active")
  generalSale GeneralSale?
  saleItems   SaleItems[]

  @@map("products")
}

model SaleItems {
  id                   String             @id @default(uuid())
  productTransactionId String             @map("product_transaction_id")
  productId            String?            @map("product_id")
  expirationDate       DateTime?          @map("expiration_date")
  productName          String             @map("product_name")
  soldQuantity         Int                @map("sold_quantity")
  unitPrice            Decimal            @map("unit_price") @db.Decimal(10, 2)
  products             Products?          @relation(fields: [productId], references: [id])
  productTransaction   ProductTransaction @relation(fields: [productTransactionId], references: [id], onDelete: Cascade)

  @@map("sale_items")
}

model VehicleEntries {
  id                 String               @id @default(uuid())
  plate              String
  entryTime          DateTime             @default(now()) @map("entry_time")
  category           VehicleCategory
  operator           String
  deletedAt          DateTime?            @map("deleted_at")
  description        String?              @default("")
  exitTime           DateTime?            @map("exit_time")
  status             VehicleStatus        @default(INSIDE)
  observation        String?              @default("")
  photo              Bytes?
  photoType          String?              @map("photo_type")
  billingMethodId    String?              @map("billing_method_id")
  billingMethod      BillingMethod?       @relation(fields: [billingMethodId], references: [id])
  vehicleTransaction VehicleTransaction[]

  @@index([plate])
  @@map("vehicle_entries")
}

model VehicleTransaction {
  id              String         @id @default(uuid())
  vehicleId       String         @map("vehicle_id")
  operator        String
  transactionDate DateTime       @map("transaction_date")
  cashRegisterId  String         @map("cash_register_id")
  amountReceived  Decimal        @default(0.00) @map("amount_received") @db.Decimal(10, 2)
  changeGiven     Decimal        @default(0.00) @map("change_given") @db.Decimal(10, 2)
  discountAmount  Decimal        @default(0) @map("discount_amount") @db.Decimal(10, 2)
  finalAmount     Decimal        @map("final_amount") @db.Decimal(10, 2)
  originalAmount  Decimal        @map("original_amount") @db.Decimal(10, 2)
  method          Method
  photo           Bytes?
  photoType       String?        @map("photo_type")
  cashRegister    CashRegister   @relation(fields: [cashRegisterId], references: [id])
  vehicleEntries  VehicleEntries @relation(fields: [vehicleId], references: [id])

  @@map("vehicle_transaction")
}

model billing_rule {
  id                String          @id
  price             Float
  billing_method_id String
  created_at        DateTime        @default(now())
  updated_at        DateTime
  base_time_minutes Int
  vehicle_type      VehicleCategory
  billing_method    BillingMethod   @relation(fields: [billing_method_id], references: [id])
}

model collection_methods {
  id           String                   @id
  title        String
  description  String
  category     CollectionMethodCategory
  is_active    Boolean                  @default(false)
  tolerance    Float?
  time_minutes Int                      @default(0)
  values       Json                     @default("{}")
  created_at   DateTime                 @default(now())
  updated_at   DateTime
  updated_by   String?
}

enum AccountRole {
  ADMIN
  NORMAL
}

enum CashRegisterStatus {
  OPEN
  CLOSED
}

enum InputType {
  number
  text
  select
}

enum Method {
  DINHEIRO
  PIX
  CREDITO
  DEBITO
}

enum VehicleCategory {
  carro
  moto
}

enum VehicleStatus {
  INSIDE
  EXITED
  DELETED
}

enum Period {
  DIARIA
  SEMANAL
  MENSAL
}

enum CollectionMethodCategory {
  POR_HORA
  POR_MINUTO
  VALOR_FIXO
}
