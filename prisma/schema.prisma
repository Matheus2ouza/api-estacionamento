generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id             String           @id @default(uuid())
  role           AccountRole    
  username       String           @unique
  authentication Authentication?

  @@map("accounts")
}

model Authentication {
  accountId    String   @id @map("account_id")
  passwordHash String   @map("password_hash")
  salt         String
  algorithm    String   @default("bcrypt")
  updatedAt    DateTime @default(now()) @map("updated_at")
  account      Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@map("authentications")
}

model CashRegister {
  id                       String                @id @default(uuid())
  openingDate              DateTime              @map("opening_date")
  closingDate              DateTime?             @map("closing_date")
  status                   CashRegisterStatus    @default(OPEN)
  operator                 String

  initialValue             Decimal               @db.Decimal(10, 2) @map("initial_value")
  finalValue               Decimal               @db.Decimal(10, 2) @map("final_value")

  vehicleEntryTotal        Decimal               @db.Decimal(10, 2) @default(0.00) @map("vehicle_entry_total")
  generalSaleTotal         Decimal               @db.Decimal(10, 2) @default(0.00) @map("general_sale_total")
  outgoingExpenseTotal     Decimal               @db.Decimal(10, 2) @default(0.00) @map("outgoing_expense_total")

  outgoingExpenses    OutgoingExpense[]
  vehicleTransactions VehicleTransaction[]
  productTransactions ProductTransaction[]

  @@map("cash_register")
}

model VehicleEntry {
  id          String         @id @default(uuid())
  plate       String
  category    VehicleCategory
  operator    String
  entryTime   DateTime       @default(now()) @map("entry_time")
  exitTime    DateTime?      @map("exit_time")
  status      VehicleStatus  @default(INSIDE)
  deletedAt   DateTime?      @map("deleted_at")
  description String?        @default("")

  vehicleTransactions VehicleTransaction[]

  @@map("vehicle_entries")
  @@index([plate])
}

model Product {
  id           String         @id @default(uuid())
  productName  String         @map("product_name")
  barcode      String?        @unique
  
  
  generalSales GeneralSale[]
  saleItems SaleItem[]

  @@map("products")
}

model GeneralSale {
  id                String         @id @default(uuid())
  productId         String         @map("product_id")
  unitPrice         Decimal        @db.Decimal(10, 2)  @map("unit_price")
  quantity          Int
  expirationDate    DateTime?      @map("expiration_date") 

  product           Product        @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@map("general_sale")
}

model VehicleTransaction {
  id               String        @id @default(uuid())
  vehicleId        String        @map("vehicle_id")
  operator         String
  paymentMethod    PaymentMethod
  transactionDate  DateTime      @map("transaction_date")
  cashRegisterId   String        @map("cash_register_id")

  originalAmount   Decimal       @db.Decimal(10, 2) @map("original_amount")
  discountAmount   Decimal       @db.Decimal(10, 2) @default(0) @map("discount_amount")
  finalAmount      Decimal       @db.Decimal(10, 2) @map("final_amount")
  amountReceived   Decimal       @db.Decimal(10, 2) @default(0.00) @map("amount_received")
  changeGiven      Decimal       @db.Decimal(10, 2) @default(0.00) @map("change_given")

  vehicleEntry     VehicleEntry  @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  cashRegister     CashRegister  @relation(fields: [cashRegisterId], references: [id], onDelete: SetNull)

  @@map("vehicle_transaction")
}

model ProductTransaction {
  id               String        @id @default(uuid())
  operator         String
  paymentMethod    PaymentMethod
  transactionDate  DateTime      @map("transaction_date")
  cashRegisterId   String        @map("cash_register_id")
  
  originalAmount   Decimal       @db.Decimal(10, 2) @map("original_amount")
  discountAmount   Decimal       @db.Decimal(10, 2) @default(0) @map("discount_amount")
  finalAmount      Decimal       @db.Decimal(10, 2) @map("final_amount")
  amountReceived   Decimal       @db.Decimal(10, 2) @default(0.00) @map("amount_received")
  changeGiven      Decimal       @db.Decimal(10, 2) @default(0.00) @map("change_given")

  cashRegister     CashRegister  @relation(fields: [cashRegisterId], references: [id], onDelete: SetNull)
  saleItems        SaleItem[]

  @@map("product_transaction")
}

model SaleItem {
  id                   String             @id @default(uuid())
  productTransactionId String             @map("product_transaction_id")
  productId            String?            @map("product_id")
  soldQuantity         Int

  productName          String
  unitPrice            Decimal            @db.Decimal(10, 2)
  expirationDate       DateTime?

  product              Product?           @relation(fields: [productId], references: [id], onDelete: SetNull)
  productTransaction   ProductTransaction @relation(fields: [productTransactionId], references: [id], onDelete: Cascade)

  @@map("sale_items")
}


model OutgoingExpense {
  id                String         @id @default(uuid())
  description       String         @map("description")
  amount            Decimal        @db.Decimal(10, 2) @map("amount")
  transactionDate   DateTime       @default(now()) @map("transaction_date")
  cashRegisterId    String         @map("cash_register_id")
  operator          String

  cashRegister      CashRegister   @relation(fields: [cashRegisterId], references: [id], onDelete: SetNull)

  @@map("outgoing_expense")
}

model FinancialMovement {
  id                String         @id @default(uuid())
  description       String
  amount            Decimal        @db.Decimal(10, 2) @map("amount")
  paymentMethod     PaymentMethod
  transactionDate   DateTime       @default(now()) @map("transaction_date")

  @@map("financial_movement")
}

model PatioConfig {
  id               String @id @default("singleton")
  maxCars          Int
  maxMotorcycles   Int
  maxLargeVehicles Int

  @@map("patio_configs")
}

/// Representa os tipos de veículos disponíveis no sistema (ex: carro, moto)
model VehicleType {
  id                  String                @id
  name                String
  billingMethodRules  BillingMethodRule[]
}

/// Representa os métodos de cobrança disponíveis (ex: por hora, por minuto, taxa fixa)
model BillingMethod {
  id                  String                 @id
  name                String
  description         String?
  vehicleSpecific     Boolean                @default(false)
  tolerance           Boolean                @default(false)
  inputs              BillingMethodInput[]
  rules               BillingMethodRule[]
}

/// Define os campos configuráveis de cada método de cobrança (ex: valor por hora, valor fixo)
model BillingMethodInput {
  id                Int           @id @default(autoincrement())
  billingMethod     BillingMethod @relation(fields: [billingMethodId], references: [id], onDelete: Cascade)
  billingMethodId   String
  key               String
  label             String
  placeholder       String?
  type              String // ex: "number"
}

/// Armazena os valores definidos para os campos dos métodos, por tipo de veículo
model BillingMethodRule {
  id                Int           @id @default(autoincrement())
  billingMethod     BillingMethod @relation(fields: [billingMethodId], references: [id], onDelete: Cascade)
  billingMethodId   String
  vehicleType       VehicleType   @relation(fields: [vehicleTypeId], references: [id], onDelete: Cascade)
  vehicleTypeId     String
  key               String
  value             Decimal
}

enum AccountRole {
  ADMIN
  NORMAL
}

enum CashRegisterStatus {
  OPEN
  CLOSED
}

enum PaymentMethod {
  DINHEIRO
  PIX
  CREDITO
  DEBITO
}

enum VehicleCategory {
  carro
  moto
  carroGrande
}

enum VehicleStatus {
  INSIDE     // veículo está no pátio
  EXITED     // veículo saiu do pátio
  DELETED    // registro foi "apagado" mas pode ser restaurado
}